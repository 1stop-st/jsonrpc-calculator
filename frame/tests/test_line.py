# coding: UTF-8

from unittest import TestCase
from frame import line
from random import uniform
from numpy.testing import *


class LineTests(TestCase):
    def test_stiffnessLocal(self):
        # As a truss
        L = uniform(1e-3, 1e9)
        E = uniform(1e-3, 1e9)
        A = uniform(1e-3, 1e9)
        k = E * A / L
        a = line.stiffnessLocal(L, E, 0, A)
        assert_allclose((
            (k, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
        assert_allclose((
            (-k, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
        assert_allclose((
            (-k, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
        assert_allclose((
            (k, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())

    def test_stiffnessGlobal(self):
        # As a truss, no rotation.
        a = line.stiffnessGlobal(1241, 0, 0, 5.2, 0, 12.4)
        assert_allclose((
            (0.051958098, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
        assert_allclose((
            (-0.051958098, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
        assert_allclose((
            (-0.051958098, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
        assert_allclose((
            (0.051958098, 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.),
            (0., 0., 0., 0., 0., 0.)), a.next())
